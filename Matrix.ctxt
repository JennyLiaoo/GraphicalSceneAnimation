#BlueJ class context
comment0.target=Matrix
comment0.text=\r\n\ This\ class\ represents\ the\ transformations\ being\ applied\ to\ the\ Canvas.\ Transformations\ are\ currently\ limited\r\n\ to\ rotate(deg),\ scale(factor)\ and\ translate(x,\ y).\ \ As\ such,\ it\ only\ performs\ 2D\ transformations.\r\n\r\n\ push()\ must\ be\ called\ before\ a\ set\ transformations\ are\ called\ and\ pop()\ can\ be\ called\ to\ return\ to\ the\r\n\ previous\ state\ of\ tranformations.\ The\ order\ in\ which\ transformations\ are\ applied\ also\ matter.\r\n\r\n\r\n\ @author\:\ Adam\ Drenth\r\n\ @version\:\ 12.12.2021\r\n
comment1.params=c
comment1.target=Matrix(javafx.scene.canvas.Canvas)
comment2.params=
comment2.target=Matrix\ getMatrix()
comment3.params=
comment3.target=void\ reset()
comment3.text=\r\n\ Removes\ all\ transformations\ that\ have\ been\ applied\ to\ the\ Canvas\r\n
comment4.params=
comment4.target=void\ push()
comment4.text=\r\n\ Saves\ the\ current\ state\ of\ the\ transformations.\ A\ program\ can\ return\ to\ this\ state\ by\ calling\ pop()\r\n
comment5.params=
comment5.target=void\ pop()
comment5.text=\r\n\ Restores\ the\ previous\ state\ of\ Canvas\ before\ push()\ was\ called.\r\n
comment6.params=x\ y
comment6.target=void\ translate(double,\ double)
comment6.text=\r\n\ Applies\ a\ 2D\ translation\ that\ moves\ all\ points\ drawn\ afterward\ over\ by\ (x,y)\ pixels\r\n\ @param\ x\ The\ horizontal\ shift\r\n\ @param\ y\ The\ vertical\ shift\r\n
comment7.params=ratio
comment7.target=void\ scale(double)
comment7.text=\r\n\ Applies\ scaling\ to\ the\ Canvas\ where\ all\ points\ are\ scaled\ from\ the\ current\ position\ of\ the\r\n\ origin\ (0,0).\r\n\ @param\ ratio\ the\ scalar\ multiplying\ factor.\ >1\ will\ enlarge,\ 0\ <\ ratio\ <\ 1\ will\ shrink.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ Negative\ reflects.\r\n
comment8.params=degrees
comment8.target=void\ rotate(double)
comment8.text=\r\n\ Applies\ rotation\ to\ the\ Canvas\ where\ all\ points\ are\ rotated\ about\ the\ current\ position\ of\ the\r\n\ origin\ (0,0).\r\n\ @param\ degrees\ the\ angle\ to\ be\ rotated\ in\ degrees,\ where\ positive\ is\ clockwise.\r\n
comment9.params=t
comment9.target=void\ applyTransform(javafx.scene.transform.Affine)
comment9.text=\r\n\ Advanced\ method\ to\ allow\ for\ JavaFX\ complex\ transformations\ to\ be\ applied,\ including\ Shears.\r\n\ @param\ t\ A\ transformation\ matrix\ to\ be\ applied\ to\ the\ Canvas\r\n
numComments=10
