#BlueJ class context
comment0.target=PVector
comment0.text=\n\ Vector\ class\ is\ useful\ for\ doing\ physics,\ physical\ simulations\ and\ simple\ games.\ This\ class\ focuses\ on\ 2D\ vectors\ only.\n\ All\ angles\ are\ computed\ in\ degrees\n\ Vector\ math\ included\ is\:\n\ \ \ \ \ \ Vectors\ as\ components\ (x,\ y)\ or\ standard\ vector\ (magnitude,\ angle)\n\ \ \ \ \ \ Vector\ addition\ and\ subtraction\n\ \ \ \ \ \ Scalar\ only\ operations\:\ multiplication,\ division\n\ \ \ \ \ \ Finding\ the\ unit\ vector\:\ unit()\ or\ normalize()\n\ \ \ \ \ \ Static\ methods\:\ angleBetween,\ magnitudeDiff\n\n\ @author\:\ Adam\ Drenth\n\ @version\:\ 12.12.2021\n
comment1.params=xComponent\ yComponent
comment1.target=PVector(double,\ double)
comment10.params=scalar
comment10.target=PVector\ mult(double)
comment10.text=\n\ Scalar\ multiplication\ of\ a\ PVector.\ This\ does\ not\ alter\ the\ original\ vector.\n\ @param\ scalar\ The\ amount\ to\ alter\ the\ magnitude\ of\ the\ vector\ by\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
comment11.params=scalar
comment11.target=PVector\ div(double)
comment11.text=\n\ Scalar\ division\ of\ a\ PVector.\ This\ does\ not\ alter\ the\ original\ vector.\n\ @param\ scalar\ The\ amount\ to\ alter\ the\ magnitude\ of\ the\ vector\ by\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
comment12.params=a\ b
comment12.target=double\ angleBetween(PVector,\ PVector)
comment12.text=\n\ Helper\ math\ method\ for\ determining\ the\ angle\ between\ two\ PVectors\n\ @param\ a\ First\ PVector\n\ @param\ b\ Second\ PVector\n\ @return\ The\ angle\ in\ degrees\n
comment13.params=a\ b
comment13.target=double\ magnitudeDiff(PVector,\ PVector)
comment13.text=\n\ Helper\ math\ method\ for\ determining\ the\ difference\ of\ magnitude\ between\ two\ PVectors\n\ @param\ a\ First\ PVector\n\ @param\ b\ Second\ PVector\n\ @return\ The\ result\ of\ a.mag\ -\ b.mag\n
comment14.params=
comment14.target=PVector\ unit()
comment14.text=\n\ Creates\ a\ vector\ with\ the\ same\ angle\ as\ the\ current\ PVector\ but\ a\ magnitude\ of\ 1\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
comment15.params=
comment15.target=PVector\ normalize()
comment15.text=\n\ Creates\ a\ vector\ with\ the\ same\ angle\ as\ the\ current\ PVector\ but\ a\ magnitude\ of\ 1\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
comment2.params=
comment2.target=PVector\ get()
comment2.text=\n\ get()\ allows\ for\ a\ copy\ of\ the\ PVector\n\ @return\ a\ deep\ copy\ of\ the\ PVector\n
comment3.params=
comment3.target=double\ getXComp()
comment4.params=
comment4.target=double\ getYComp()
comment5.params=
comment5.target=double\ getMagnitude()
comment6.params=
comment6.target=double\ getAngle()
comment7.params=degrees\ magnitude
comment7.target=PVector\ PVectorUsingAngle(double,\ double)
comment7.text=\n\ Special\ constructor\ for\ making\ PVectors\ using\ their\ angle\ and\ magnitude\n\ @param\ degrees\ \ \ Angle\ of\ the\ vector\ from\ the\ origin\ and\ the\ positive\ x-axis.\ \ Measured\ in\ degrees\n\ @param\ magnitude\ The\ distance\ from\ the\ origin\n\ @return\ A\ PVector\ with\ the\ correct\ x/y\ components\n
comment8.params=other
comment8.target=PVector\ add(PVector)
comment8.text=\n\ Vector\ addition\ using\ components.\ This\ does\ not\ alter\ the\ original\ vector.\n\ @param\ other\ The\ other\ PVector\ to\ be\ added\ to\ the\ current\ vector.\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
comment9.params=other
comment9.target=PVector\ sub(PVector)
comment9.text=\n\ Vector\ subtraction\ using\ components.\ This\ does\ not\ alter\ the\ original\ vector.\n\ @param\ other\ The\ other\ PVector\ to\ be\ subtracted\ from\ the\ current\ vector.\n\ @return\ A\ new\ PVector\ to\ allow\ for\ chaining\ of\ methods\n
numComments=16
